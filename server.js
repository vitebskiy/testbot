const express = require('express');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö Wi-Fi —Å–µ—Ç–µ–π
const ALLOWED_NETWORKS = [
    '–í–ê–®_WIFI_–ù–ê–ó–í–ê–ù–ò–ï',      // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏
    'BACKUP_WIFI_NAME',       // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å–µ—Ç—å
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏
];

// –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ —Ä–æ—É—Ç–µ—Ä–æ–≤
const ALLOWED_ROUTER_IPS = [
    '192.168.1.1',
    '192.168.0.1', 
    '10.0.0.1',
    '172.16.0.1'
];

// API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
app.post('/api/verify-network', async (req, res) => {
    try {
        const { userAgent, timestamp, telegramData } = req.body;
        const clientIP = req.ip || req.connection.remoteAddress;
        
        console.log('–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', {
            ip: clientIP,
            userAgent,
            timestamp: new Date(timestamp),
            hasTelegramData: !!telegramData
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç replay-–∞—Ç–∞–∫)
        const requestTime = new Date(timestamp);
        const now = new Date();
        const timeDiff = Math.abs(now - requestTime);
        
        if (timeDiff > 300000) { // 5 –º–∏–Ω—É—Ç
            return res.status(401).json({
                accessGranted: false,
                reason: '–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏)
        const isLocalNetwork = isLocalIP(clientIP);
        
        if (!isLocalNetwork) {
            return res.status(401).json({
                accessGranted: false,
                reason: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏'
            });
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if (telegramData) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Telegram –¥–∞–Ω–Ω—ã—Ö
            // const isValidTelegram = validateTelegramData(telegramData);
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        res.json({
            accessGranted: true,
            message: '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω',
            network: 'authorized'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', error);
        res.status(500).json({
            accessGranted: false,
            reason: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
function isLocalIP(ip) {
    // –£–¥–∞–ª—è–µ–º IPv6 –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
    ip = ip.replace('::ffff:', '');
    
    const localRanges = [
        /^192\.168\./,          // 192.168.0.0/16
        /^10\./,                // 10.0.0.0/8
        /^172\.(1[6-9]|2[0-9]|3[01])\./,  // 172.16.0.0/12
        /^127\./,               // 127.0.0.0/8 (localhost)
        /^::1$/,                // IPv6 localhost
        /^localhost$/           // localhost
    ];
    
    return localRanges.some(range => range.test(ip));
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–æ—É—Ç–µ—Ä–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
app.get('/check-router', (req, res) => {
    res.json({ 
        status: 'ok', 
        message: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞',
        timestamp: Date.now()
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –î–ª—è Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://your-domain.com`);
    console.log(`üè† –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:${PORT}`);
    console.log(`üîí –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏: ${ALLOWED_NETWORKS.join(', ')}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});
